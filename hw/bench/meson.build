tests = files(
    'fifo_tb.sv',
    'qspi_tb.sv',
    'sdram_tb.sv',
)

questa_path = get_option('questa_search_path')
if questa_path == ''
    questa_path = []
endif

vlog = get_option('vlog_custom_cmd')
if vlog.length() == 0
    vlog = [find_program('vlog', 'vlog.exe', dirs: questa_path, required: true)]
endif

vsim = get_option('vsim_custom_cmd')
if vsim.length() == 0
    vsim_exe = find_program('vsim', 'vsim.exe', dirs: questa_path, required: true)
    vsim_args = []
else
    vsim_exe = find_program(vsim[0], required: true)
    vsim_args = []
    foreach i : range(1, vsim.length())
        vsim_args += vsim[i]
    endforeach
endif

fs = import('fs')
build_dir = meson.project_build_root()
work = custom_target(
    'sim_work',
    build_always_stale: true,
    command: [
        vlog,
        '+libext+.sv+.vp+.v',
        '-work', '@OUTPUT@',
        '-y', fs.relative_to(meson.project_source_root() / 'src', build_dir),
        '-y', fs.relative_to(meson.current_source_dir(), build_dir),
        '@INPUT@',
    ],
    input: tests,
    output: 'work',
)

foreach f : tests
    module = fs.stem(f)
    test(
        module,
        vsim_exe,
        args: [
            vsim_args,
            '-c',
            '-voptargs=-debug',
            '-onfinish', 'stop',
            '-do', 'run -all; quit -code [coverage attribute -name TESTSTATUS -concise]',
            module,
        ],
        depends: work,
        workdir: meson.current_build_dir(),
        verbose: true,
    )
endforeach
